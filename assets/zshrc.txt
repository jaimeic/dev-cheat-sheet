#
# User configuration sourced by interactive shells
#

# Define zim location
export ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim

# Start zim
[[ -s ${ZIM_HOME}/init.zsh ]] && source ${ZIM_HOME}/init.zsh

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=/Users/jaime.castro/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="mh"

# Set list of themes to load
# Setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
)

# source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


#####################
#######ALIASES#######
#####################

# Homebrew path
# export PATH=/opt/homebrew/bin:$PATH

# aptible commands
alias aptilogin="aptible login --lifetime 7d"

# git
alias syncfork="git fetch upstream && git checkout master && git rebase upstream/master && git push -f origin master"
alias gs="git status"
alias gd="git diff"
alias gcm="git checkout master"

## Remove git branch both locally and remotely.
## Usage: gbdel branch_name
function gbdel {
    # Branch name present?
    if [[ -z "$1" ]]; then
        echo "\n🤔 Oops… you forgot to provide the branch name"
        echo "👉 e.g. gbdel branch_name\n"
    else
        # Start deleting
        echo "\n⏳ Deleting…\n"
        git branch -D "$1" # Local delete.
        git push origin --delete "$1" # Remote delete.
        echo "\n✅✅Git branch $1 was deleted from local and remote.\n"
    fi
}

## Create branch locally and remotely
## Usage: gbcreate branch_name
function gbcreate {
    # Branch name present?
    if [[ -z "$1" ]]; then
        echo "\n🤔 Oops… you forgot to provide the branch name"
        echo "👉 e.g. gbcreate branch_name\n"
    else
        # Start creating branch.
        echo "\n⏳ Creating…\n"
        git checkout -b "$1" # Local create.
        git push -u origin "$1" # Remote create.
        echo "\n✅ Git branch $1 was created in local and remote.\n"
    fi
}

# jupyter
alias jlab="jupyter lab"
alias jnb="jupyter notebook"

# anaconda path
export PATH=/anaconda3/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

# sops
alias dsops="sops --decrypt secrets.enc.yaml >! secrets.yaml"
alias esops="sops --encrypt secrets.yaml >! secrets.enc.yaml; rm secrets.yaml"
alias nicesops="sops secrets.enc.yaml"

# kubernetes
alias k="kubectl"

# extra alias
